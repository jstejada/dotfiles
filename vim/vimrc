set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" Brief help
" :PluginList          - list configured plugins
" :PluginInstall(!)    - install (update) plugins
" :PluginSearch(!) foo - search (or refresh cache first) for foo
" :PluginClean(!)      - confirm (or auto-approve) removal of unused plugins
"
" see :h vundle for more details or wiki for FAQ

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" Keep Plugin commands between vundle#begin/end.

" Plugins
Plugin 'benmills/vimux'
Plugin 'bling/vim-airline'
Plugin 'bling/vim-bufferline'
Plugin 'henrik/vim-reveal-in-finder'
Plugin 'jiangmiao/auto-pairs'
Plugin 'kien/ctrlp.vim'
Plugin 'matze/vim-move'
Plugin 'mhinz/vim-blockify'
Plugin 'mhinz/vim-signify'
Plugin 'mhinz/vim-startify'
Plugin 'mileszs/ack.vim'
Plugin 'myusuf3/numbers.vim'
Plugin 'scrooloose/syntastic'
Plugin 'sjl/vitality.vim'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-eunuch'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-git'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-sensible'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-unimpaired'
Plugin 'tpope/vim-vinegar'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'majutsushi/tagbar'

" Python
Plugin 'jmcantrell/vim-virtualenv'
Plugin 'alfredodeza/pytest.vim'

" Snippets
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'

" Colors
Plugin 'altercation/vim-colors-solarized'

" Syntax
Plugin 'kchmck/vim-coffee-script'
Plugin 'mustache/vim-mustache-handlebars'
Plugin 'groenewege/vim-less'
Plugin 'beyondwords/vim-twig'
Plugin 'pangloss/vim-javascript'
Plugin 'tpope/vim-haml'
Plugin 'cakebaker/scss-syntax.vim'
Plugin 'tpope/vim-liquid'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on

" Non-Plugin stuff after this line

"" Basics
set number
syntax on
set encoding=utf-8
set mouse=a

"" Things like whitespace
set nowrap
set tabstop=2 shiftwidth=2
set expandtab
set backspace=indent,eol,start
set list
set autoindent
set linespace=3
set formatoptions=qrn1
set formatoptions+=w
set cursorline

" highlight NonText guifg=#4a4a59
" highlight SpecialKey guifg=#4a4a59

"" show where line ends
"" use gq to apply formatting
set textwidth=80
set colorcolumn=81

au BufRead,BufNewFile *.md setlocal formatoptions+=ct

"" who even wants swap files???
set noswapfile
set nobackup
set nowb

"" what mode is i am?
set showmode

"" display things like newlines, carriage returns, whitespace, etc...
set listchars=""
set listchars+=tab:▸\
" set listchars+=eol:¬
set listchars+=trail:.
" set listchars+=extends:>
" set listchars+=precedes:<

" ☠
" ❤

"" search settings
set hlsearch
set incsearch
set ignorecase
set smartcase
nmap <silent> ,/ :nohlsearch<CR>
hi Search    cterm=NONE ctermfg=white ctermbg=5

"" undo forever and ever
silent !mkdir ~/.vim/backups > /dev/null 2>&1
set undodir=~/.vim/backups
set undofile

"" wildcard settings
set wildignore+=*.o,*.out,*.obj,*.rbc,*.rbo,*.class,*.gem,*.pyc
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*
set wildignore+=*.swp,*~,._*
set wildignore+=*/node_modules/*,*/bower_components/*
set wildignore+=*/env/*,*/venv/*,*/devenv/*,*/__pycache__/*
set wildignore+=.DS_Store

"" set <leader> to ,
let mapleader = ","
set timeoutlen=500

"" enable code folding
set foldenable
set foldmethod=syntax
set foldlevelstart=99

"" hide mouse when typing
set mousehide

"" split windows below the current window.
set splitbelow

"" session settings
set sessionoptions=resize,winpos,winsize,buffers,tabpages,folds,curdir,help

"" map escape key to jk -- much faster
" also, <C-c> and <C-[>
imap jk <esc>
imap jj <esc>
imap kk <esc>

"" window navigation
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l

"" highlight brackets
hi MatchParen cterm=bold ctermbg=darkmagenta ctermfg=white

"" yank text to the OS X clipboard
set clipboard=unnamed

"" preserve indentation while pasting text from the OS X clipboard
"" use ,p dummy
noremap <leader>p :set paste<CR>:put  *<CR>:set nopaste<CR>

"" kill all trailing whitespace
function! <SID>RemoveWhitespaces()
  let l = line(".")
  let c = col(".")
  execute '%s/\s\+$//e'
  call cursor(l, c)
endfunction
nnoremap <silent> <leader><Space> :call <SID>RemoveWhitespaces()<CR>

" Remove white spaces on write
autocmd BufWritePre * :call <SID>RemoveWhitespaces()

"" up/down keys move by row, rather than line
nnoremap j gj
nnoremap k gk

"" switch buffers without saving
set hidden

"" bubble single lines
nmap <C-k> [e
nmap <C-j> ]e

"" bubble multiple lines
vmap <C-k> [egv
vmap <C-j> ]egv

"" Reload .vimrc after editing and saving
if has("autocmd")
  autocmd bufwritepost .vimrc source $MYVIMRC
endif

" Leader-v to edit vimrc
nmap <leader>v :e $MYVIMRC<CR>

" Buffer switching
nnoremap <leader><leader> <c-^>
nnoremap <Tab> :bn<CR>
nnoremap <S-Tab> :bp<CR>

" set scss files RIGHT
au BufRead,BufNewFile *.scss set filetype=scss


" CTAGS  -------------------------------------------------------------------

" Set tag file location
set tags+=.git/tags

" Function to regenerate tag file
function! FlushCtags()
  silent! exe ":!ctags ."
endfunction

" mapping to regenerate tags file
" silent! nnoremap <silent> TT :call FlushCtags()<CR>

" mapping to toggle tagbar
nnoremap <leader>. :TagbarToggle<cr>

" mapping to use ctrlp tags function
nnoremap <silent> <Leader>b :CtrlPTag<CR>


"" PLUGINS -------------------------------------------------------------------
" Airline, a powerline replacement
let g:airline_powerline_fonts = 1
" let g:airline_section_b = '%{getcwd()}'
" let g:airline_section_c = '%t'
let g:airline#extensions#tabline#enabled = 1


"" Blockify
let g:blockify_pairs = {
      \ 'c':    [ '{', '}' ],
      \ 'cpp':  [ '{', '}' ],
      \ 'java': [ '{', '}' ],
      \ 'php': [ '{', '}' ],
      \ 'css': [ '{', '}' ],
      \ 'scss.css': [ '{', '}' ],
      \ 'scss': [ '{', '}' ],
      \ 'javascript': [ '{', '}' ],
      \ 'php.drupal': [ '{', '}' ],
      \}

"" JS enhanced syntax
au FileType javascript call JavaScriptFold()


"" Numbers
let g:numbers_exclude = ['nerdtree']


"" Syntastic
let g:syntastic_enable_signs=1
let g:syntastic_auto_jump=0
let g:syntastic_stl_format = '[%E{Err: %fe #%e}%B{, }%W{Warn: %fw #%w}]'
let g:syntastic_javascript_checkers = ['jshint']


"" EasyMotion
let g:EasyMotion_leader_key = '<Space>'


"" Ctrlp
let g:ctrlp_show_hidden = 1
let g:ctrlp_extensions = ['tag']
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'


"" Tagbar
let g:tagbar_autofocus = 1
let g:tagbar_autoclose = 1

"" Options to add support for Coffeescript
let g:tagbar_type_coffee = {
    \ 'ctagstype' : 'coffee',
    \ 'kinds'     : [
        \ 'c:classes',
        \ 'm:methods',
        \ 'f:functions',
        \ 'v:variables',
        \ 'f:fields',
    \ ]
\ }


"" UltiSnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"


"" Colors and type------------------------------------------------------------
set guifont=Inconsolata\ for\ Powerline:h14
colorscheme bubblegum
if has('gui_running')
  set go-=T
endif

"" Vimux
map <Leader>js :call VimuxRunCommand("clear; node " . bufname("%"))<CR>

